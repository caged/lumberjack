import './Knob.svelte.css.proxy.js';
/* src/Knob.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	set_data,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let div1;
	let div0;
	let span0;
	let t0;
	let t1;
	let span1;
	let t2;
	let t3;
	let input_knob;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = text(/*label*/ ctx[1]);
			t1 = space();
			span1 = element("span");
			t2 = text(/*value*/ ctx[0]);
			t3 = space();
			input_knob = element("input-knob");
			input_knob.innerHTML = `<svg viewBox="0 0 100 100" class="w-full h-full text-white text-opacity-50"><circle cx="50%" cy="50%" r="40" stroke="currentColor" stroke-width="9" stroke-dasharray="3 6" fill="none"></circle><circle class="stroke-black" cx="50%" cy="50%" r="44" stroke="currentColor" stroke-width="6" fill="none"></circle><rect x="48" y="6" width="4" height="20" fill="white"></rect></svg>`;
			attr(span0, "class", "svelte-1jam2bv");
			toggle_class(span0, "moving", /*moving*/ ctx[2]);
			attr(span1, "class", "svelte-1jam2bv");
			toggle_class(span1, "moving", !/*moving*/ ctx[2]);
			attr(div0, "class", "text-center mb-1 text-xs");
			set_custom_element_data(input_knob, "scale", "100");
			set_custom_element_data(input_knob, "min", "0");
			set_custom_element_data(input_knob, "max", "100");
			set_custom_element_data(input_knob, "class", "svelte-1jam2bv");
			attr(div1, "class", "inline-block");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(span0, t0);
			append(div0, t1);
			append(div0, span1);
			append(span1, t2);
			append(div1, t3);
			append(div1, input_knob);

			if (!mounted) {
				dispose = [
					listen(input_knob, "knob-move-start", /*onKnobMoveStart*/ ctx[3]),
					listen(input_knob, "knob-move-end", /*onKnobMoveEnd*/ ctx[4]),
					listen(input_knob, "knob-move-change", /*onKnobMoveChange*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*label*/ 2) set_data(t0, /*label*/ ctx[1]);

			if (dirty & /*moving*/ 4) {
				toggle_class(span0, "moving", /*moving*/ ctx[2]);
			}

			if (dirty & /*value*/ 1) set_data(t2, /*value*/ ctx[0]);

			if (dirty & /*moving*/ 4) {
				toggle_class(span1, "moving", !/*moving*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { label = "" } = $$props;
	let { value } = $$props;
	let { format = value => Math.round(value) } = $$props;
	let moving = false;

	const onKnobMoveStart = e => {
		$$invalidate(2, moving = true);
		return true;
	};

	const onKnobMoveEnd = e => {
		$$invalidate(2, moving = false);
		return true;
	};

	const onKnobMoveChange = e => {
		const target = e.target;
		if (target) $$invalidate(0, value = format(target.value));
	};

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('format' in $$props) $$invalidate(6, format = $$props.format);
	};

	return [value, label, moving, onKnobMoveStart, onKnobMoveEnd, onKnobMoveChange, format];
}

class Knob extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { label: 1, value: 0, format: 6 });
	}
}

export default Knob;