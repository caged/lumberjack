/* src/Knob.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_custom_element_data,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let div1;
	let t0;
	let t1;
	let input_knob;
	let div0;
	let t3;
	let t4;

	return {
		c() {
			div1 = element("div");
			t0 = text(/*label*/ ctx[0]);
			t1 = text(" label\n  ");
			input_knob = element("input-knob");
			div0 = element("div");
			div0.textContent = "â€¢";
			t3 = space();
			t4 = text(/*value*/ ctx[1]);
			attr(div0, "class", "mark");
			set_custom_element_data(input_knob, "value", "0");
			set_custom_element_data(input_knob, "scale", "100");
			set_custom_element_data(input_knob, "min", "0");
			set_custom_element_data(input_knob, "max", "100");
			attr(div1, "class", "inline-block");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, t0);
			append(div1, t1);
			append(div1, input_knob);
			append(input_knob, div0);
			append(input_knob, t3);
			append(input_knob, t4);
		},
		p(ctx, [dirty]) {
			if (dirty & /*label*/ 1) set_data(t0, /*label*/ ctx[0]);
			if (dirty & /*value*/ 2) set_data(t4, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { label = "" } = $$props;
	let { value } = $$props;

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
	};

	return [label, value];
}

class Knob extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { label: 0, value: 1 });
	}
}

export default Knob;